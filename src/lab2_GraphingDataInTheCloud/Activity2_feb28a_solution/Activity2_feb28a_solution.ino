#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "IoTK_Activity_02"
  https://create.arduino.cc/cloud/things/eeb745e3-8a83-499b-94f5-b198740e4199 
 
  Arduino IoT Cloud Properties description
 
  The following variables are automatically generated and updated when changes are made to the Thing properties
 
  float humidity;
  float temperature;
 
  Properties which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
#include "thingProperties.h"
#include <Arduino_MKRIoTCarrier.h>
MKRIoTCarrier carrier;
 
unsigned long time; //create the "time" variable that we will use to record how long the program has run for
 
void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  
  // Defined in thingProperties.h
  initProperties();
  
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  CARRIER_CASE = false;
  carrier.begin();
  
  setDebugMessageLevel(4);   //Get Cloud Info/errors , 0 (only errors) up to 4
  ArduinoCloud.printDebugInfo();
  
  while (ArduinoCloud.connected() != 1) {
    ArduinoCloud.update();
    carrier.display.setTextSize(3);
    carrier.display.setCursor(20, 70);
    carrier.display.println("Waiting For");
    carrier.display.setCursor(5, 110);
    carrier.display.println("Connection...");
    delay(500);
  }
 
  Serial.println("time,temperature,humidity"); //add the "time" column
}
 
void loop() {
  ArduinoCloud.update();
  // Your code here 
  temperature = carrier.Env.readTemperature();
  humidity = carrier.Env.readHumidity();
  
  time = millis(); //check how long the program has run for in milliseconds
  
  double seconds = time / 1000; //divide by 1000 to get measurements in seconds 
  
  Serial.print(seconds); //print seconds to serial monitor
  Serial.print(",");
  
  Serial.print(temperature);
  Serial.print(",");
  Serial.println(humidity);
    
  delay(1000);
}