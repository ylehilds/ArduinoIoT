#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "Explore_IoT_Activity_4"
  https://create.arduino.cc/cloud/things/eab15d7a-ea60-458b-8b08-f388e841e8ed
 
  Arduino IoT Cloud Properties description
 
  The following variables are automatically generated and updated when changes are made to the Thing properties
 
  String message;
  CloudColoredLight rgb;
  int screenColor;
  int soundDuration;
  int soundFrequency;
  int textSize;
  bool challenge_function;
  bool soundOn;
  bool warningAlarm;
 
  Properties which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
 
#include "thingProperties.h"
#include <Arduino_MKRIoTCarrier.h>
MKRIoTCarrier carrier;
 
void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
 
  // Defined in thingProperties.h
  initProperties();
  
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  CARRIER_CASE = false;
  carrier.begin();
  
  setDebugMessageLevel(4);   //Get Cloud Info/errors , 0 (only errors) up to 4
  ArduinoCloud.printDebugInfo();
  
  while (ArduinoCloud.connected() != 1) {
    ArduinoCloud.update();
    carrier.display.setTextSize(3);
    carrier.display.setCursor(20, 70);
    carrier.display.println("Waiting For");
    carrier.display.setCursor(5, 110);
    carrier.display.println("Connection...");
    delay(500);
  }
}
 
void loop() {
  ArduinoCloud.update();
  // Your code here
  if (warningAlarm == true) {
    alarm();
  }
 
  carrier.display.setCursor(50, 100);
 
  if (soundOn == true) {
    carrier.Buzzer.sound(soundFrequency);
    delay(soundDuration);
    carrier.Buzzer.noSound();
    delay(soundDuration);
  }
  
  if (challenge_function == true) {
    challenge_alarm();
  }
 
}
 
void alarm() {
  carrier.display.fillScreen(ST77XX_RED); //set the background color of the screen to red
  carrier.display.setTextColor(ST77XX_WHITE); //set the color of the text to white
  carrier.display.setTextSize(3); //set the size of the text to 3 (medium)
  carrier.display.setCursor(50, 100); //set the cursor at position x=50, y=100
  carrier.display.print("WARNING!"); //display "WARNING!" on the screen
  carrier.Buzzer.sound(1000); //turn on the sound buzzer with frequency=1000
  
  delay(1000); // wait for 1 second
 
  carrier.display.fillScreen(ST77XX_WHITE); //set the background color of the screen to white
  carrier.display.setTextColor(ST77XX_RED); //set the color of the text to red
  carrier.display.setCursor(50, 100); //set the cursor at position x=50, y=100
  carrier.display.print("WARNING!"); //display "WARNING!" on the screen
  carrier.Buzzer.noSound();  //turn off the sound buzzer
  
  delay(1000); // wait for 1 second
  
  carrier.display.fillScreen(ST77XX_WHITE); //set screen to white
  carrier.display.setTextColor(ST77XX_WHITE); //set text to white
}
 
void backgroundColor() {
  
  switch (screenColor) {
    case 0:
      //if number's value is 0, execute code here
      carrier.display.fillScreen(ST77XX_BLACK);
      carrier.display.setTextColor(ST77XX_WHITE); //set the color of the text to WHITE
      break;
  
    case 1:
      //if number's value is 1, execute code here
      carrier.display.fillScreen(ST77XX_RED);
      carrier.display.setTextColor(ST77XX_WHITE); //set the color of the text to WHITE
      break;
      
    case 2:
      //if number's value is 2, execute code here
      carrier.display.fillScreen(ST77XX_YELLOW);
      carrier.display.setTextColor(ST77XX_BLACK); //set the color of the text to BLACK
      break;
      
    case 3:
      //if number's value is 3, execute code here
      carrier.display.fillScreen(ST77XX_ORANGE);
      carrier.display.setTextColor(ST77XX_WHITE); //set the color of the text to WHITE
      break;
      
    case 4:
      //if number's value is 4, execute code here
      carrier.display.fillScreen(ST77XX_GREEN);
      carrier.display.setTextColor(ST77XX_BLACK); //set the color of the text to BLACK
      break;
      
    case 5:
      //if number's value is 5, execute code here
      carrier.display.fillScreen(ST77XX_BLUE);
      carrier.display.setTextColor(ST77XX_WHITE); //set the color of the text to WHITE
      break;
      
    case 6:
      //if number's value is 6, execute code here
      carrier.display.fillScreen(ST77XX_MAGENTA);
      carrier.display.setTextColor(ST77XX_WHITE); //set the color of the text to WHITE
      break;
  }
 
}
 
void onMessageChange() {
  // Do something
  backgroundColor();
  carrier.display.setTextSize(textSize);
  carrier.display.println(message);
}
 
void onScreenColorChange() {
  // Do something
  backgroundColor();
  carrier.display.setTextSize(textSize);
  carrier.display.println(message);
}
 
void onTextSizeChange() {
  // Do something
  backgroundColor();
  carrier.display.setTextSize(textSize);
  carrier.display.println(message);
}
 
void onRgbChange() {
  // Do something
  uint8_t r, g, b;
  rgb.getValue().getRGB(r, g, b);
  
  if (rgb.getSwitch()){
    
    for(int i=0; i<= 4 ; i++){
      carrier.leds.setPixelColor(i, g, r, b);
    }
    
    carrier.leds.show();
    
  }else{
    
    for(int i=0; i<= 4 ; i++){
      carrier.leds.setPixelColor(i,0);
    }
    
    carrier.leds.show();
  }
}
 
void onSoundDurationChange() {
  // Do something
}
 
 
void onSoundFrequencyChange() {
  // Do something
}
 
void onSoundOnChange() {
  // Do something
}
 
void onWarningAlarmChange() {
  // Do something
}
 
void onChallengeFunctionChange() {
  // Do something
 
}
 
void challenge_alarm() {
  carrier.display.fillScreen(ST77XX_BLUE);
  carrier.display.setTextColor(ST77XX_YELLOW);
  carrier.display.setTextSize(3);
  carrier.display.setCursor(50, 100);
  carrier.display.println("Put your text here");
  // carrier.Buzzer.sound(1000);
  delay(1000);
 
  carrier.display.fillScreen(ST77XX_YELLOW);
  carrier.display.setTextColor(ST77XX_BLUE);
  carrier.display.setTextSize(3);
  carrier.display.setCursor(50, 100);
  carrier.display.println("Put your text here");
  // carrier.Buzzer.noSound();
  delay(1000);
}