#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "EIoTK_Activity_06"
  https://create.arduino.cc/cloud/things/7435581f-780a-4806-9ce7-15277c119b43
 
  Arduino IoT Cloud Properties description
 
  The following variables are automatically generated and updated when changes are made to the Thing properties
 
  float gyroscope_x;
  float gyroscope_y;
  float gyroscope_z;
  int counter;
  bool reset_counter;
 
  Properties which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
 
#include "thingProperties.h"
#include <Arduino_MKRIoTCarrier.h>
MKRIoTCarrier carrier;
 
int pir = 1;
int pirState = LOW;
 
//Colors (Green, Red, Blue)
uint32_t colorGreen = carrier.leds.Color(255 , 0 , 0);
uint32_t colorBlue = carrier.leds.Color( 0 , 0 , 255);
uint32_t colorRed = carrier.leds.Color( 0 , 255 , 0);
 
uint32_t colorPurple = carrier.leds.Color(0, 255, 255);
uint32_t colorLightBlue = carrier.leds.Color(200, 100, 255);
 
 
void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
 
  pinMode(A5, INPUT);
 
  // Defined in thingProperties.h
  initProperties();
  
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  CARRIER_CASE = true;
  carrier.begin();
  
  setDebugMessageLevel(4);   //Get Cloud Info/errors , 0 (only errors) up to 4
  ArduinoCloud.printDebugInfo();
  
  while (ArduinoCloud.connected() != 1) {
    ArduinoCloud.update();
    carrier.display.setTextSize(3);
    carrier.display.setCursor(20, 70);
    carrier.display.println("Waiting For");
    carrier.display.setCursor(5, 110);
    carrier.display.println("Connection...");
    delay(500);
  }
}
 
void loop() {
  ArduinoCloud.update();
  // Your code here
  carrier.IMUmodule.readGyroscope(gyroscope_x, gyroscope_y, gyroscope_z);
  pirState = digitalRead(pir);
 
  carrier.display.fillScreen(ST77XX_BLACK); //set the background color of the display to black
  carrier.display.setTextSize(3); //set the size of the text to 3 (medium)
  carrier.display.setCursor(50, 50); //set the cursor at position x=50, y=100
  
  carrier.display.print("Y= ");
  carrier.display.print(gyro_y);
 
  if (gyroscope_y > 50 || gyroscope_y < -50)
  {
    doorChange = !doorChange;
  }
 
 
  if (doorChange == true) {
    
    carrier.display.setCursor(20, 150); //set the cursor at position x=20, y=150
    carrier.display.println("Door Opened");
    
    if (pirState == LOW) {
      counter += 1;
 
      // when counter is between 0 and 10, leds are blue
      if (counter >= 0 && counter <= 10) {
        carrier.leds.fill(colorBlue, 0 , 5);
        carrier.leds.show();
      }
 
      // when counter is between 10 and 20, leds are purple
      else if (counter >= 11 && counter <= 20) {
        carrier.leds.fill(colorPurple, 0 , 5);
        carrier.leds.show();
      }
 
      // when counter is over 20, leds are light-blue
      else if (counter >= 21) {
        carrier.leds.fill(colorLightBlue, 0 , 5);
        carrier.leds.show();
      }
      
    }else {
      //if the door is activated it is green
      carrier.leds.fill(colorGreen, 0 , 5);
      carrier.leds.show();
    }
    
  }else {
    carrier.display.setCursor(20, 150); //set the cursor at position x=20, y=150
    carrier.display.print("Door Closed");
    
    //if the door has not been activated, the LEDs will turn red
    carrier.leds.fill(colorRed, 0 , 5);
    carrier.leds.show();
  }
 
  delay(500);
 
}
 
 
void onResetCounterChange() {
  // Do something
  counter = 0;
 
  carrier.Buzzer.sound(1000);
  delay(1000);
  carrier.Buzzer.noSound();
  delay(500);
 
  reset_counter = false;
 
}